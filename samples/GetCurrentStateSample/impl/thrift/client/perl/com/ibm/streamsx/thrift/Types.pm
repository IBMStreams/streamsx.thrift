#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

package com::ibm::streamsx::thrift::SendResponse_0;
use base qw(Class::Accessor);
com::ibm::streamsx::thrift::SendResponse_0->mk_accessors( qw( result ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{result} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{result}) {
      $self->{result} = $vals->{result};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'SendResponse_0';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::MAP) {
        {
          my $_size0 = 0;
          $self->{result} = {};
          my $_ktype1 = 0;
          my $_vtype2 = 0;
          $xfer += $input->readMapBegin(\$_ktype1, \$_vtype2, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $key5 = 0;
            my $val6 = '';
            $xfer += $input->readI32(\$key5);
            $xfer += $input->readString(\$val6);
            $self->{result}->{$key5} = $val6;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SendResponse_0');
  if (defined $self->{result}) {
    $xfer += $output->writeFieldBegin('result', TType::MAP, 1);
    {
      $xfer += $output->writeMapBegin(TType::I32, TType::STRING, scalar(keys %{$self->{result}}));
      {
        while( my ($kiter7,$viter8) = each %{$self->{result}}) 
        {
          $xfer += $output->writeI32($kiter7);
          $xfer += $output->writeString($viter8);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
