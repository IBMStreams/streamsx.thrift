<%
	use ThriftCallCommon;

	my $serverHost = $model->getParameterByName('serverHost')->getValueAt(0)->getCppExpression();
	my $serverPort = $model->getParameterByName('serverPort')->getValueAt(0)->getCppExpression();
	my $connectionTimeout = ($_ = $model->getParameterByName('connectionTimeout')) ? $_->getValueAt(0)->getCppExpression() : 120.0;
	my $sendTimeout = ($_ = $model->getParameterByName('sendTimeout')) ? $_->getValueAt(0)->getCppExpression() : 120.0;
	my $receiveTimeout = ($_ = $model->getParameterByName('receiveTimeout')) ? $_->getValueAt(0)->getCppExpression() : 120.0;

	my $class = $model->getContext()->getClass();
%>

<%SPL::CodeGen::implementationPrologue($model);%>

MY_OPERATOR::MY_OPERATOR() : socket_(new TSocket(<%=$serverHost%>, <%=$serverPort%>)), transport_(new TBufferedTransport(socket_)),
							 protocol_(new TBinaryProtocol(transport_)), client_(protocol_) {
	socket_->setConnTimeout((uint64)<%=$connectionTimeout%> * 1000);
	socket_->setSendTimeout((uint64)<%=$sendTimeout%> * 1000);
	socket_->setRecvTimeout((uint64)<%=$receiveTimeout%> * 1000);
}

MY_OPERATOR::~MY_OPERATOR() {}

void MY_OPERATOR::allPortsReady() {
	transport_->open();
}

void MY_OPERATOR::prepareToShutdown() {
	transport_->close();
}

void MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {
	try {
	<% ThriftCallCommon::generateOperatorFunctionsCall($model); %>
	} catch (TException &tx) {
		// printf("ERROR: %s\n", tx.what());
	}
	/*
	 OPort0Type otuple;
	 submit(otuple, 0); // submit to output port 0
	 */
}

void MY_OPERATOR::process(Punctuation const & punct, uint32_t port) {
   forwardWindowPunctuation(punct);
}

<%SPL::CodeGen::implementationEpilogue($model);%>
