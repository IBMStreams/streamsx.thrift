
package ThriftCall_cpp;
use strict; use Cwd 'realpath';  use File::Basename;  use lib dirname(__FILE__);  use SPL::Operator::Instance::OperatorInstance; use SPL::Operator::Instance::Context; use SPL::Operator::Instance::Expression; use SPL::Operator::Instance::ExpressionTree; use SPL::Operator::Instance::ExpressionTreeVisitor; use SPL::Operator::Instance::ExpressionTreeCppGenVisitor; use SPL::Operator::Instance::InputAttribute; use SPL::Operator::Instance::InputPort; use SPL::Operator::Instance::OutputAttribute; use SPL::Operator::Instance::OutputPort; use SPL::Operator::Instance::Parameter; use SPL::Operator::Instance::StateVariable; use SPL::Operator::Instance::Window; 
sub main::generate($$) {
   my ($xml, $signature) = @_;  
   print "// $$signature\n";
   my $model = SPL::Operator::Instance::OperatorInstance->new($$xml);
   unshift @INC, dirname ($model->getContext()->getOperatorDirectory()) . "/../impl/nl/include";
   $SPL::CodeGenHelper::verboseMode = $model->getContext()->isVerboseModeOn();
   	use ThriftCallCommon;
   
   	my $serverHost = $model->getParameterByName('serverHost')->getValueAt(0)->getCppExpression();
   	my $serverPort = $model->getParameterByName('serverPort')->getValueAt(0)->getCppExpression();
   	my $connectionTimeoutParam = $model->getParameterByName("connectionTimeout");
   	my $connectionTimeout = (defined $connectionTimeoutParam) ? $connectionTimeoutParam->getValueAt(0)->getCppExpression() : 120000;
   	my $sendTimeoutParam = $model->getParameterByName("sendTimeout");
   	my $sendTimeout = (defined $sendTimeoutParam) ? $sendTimeoutParam->getValueAt(0)->getCppExpression() : 120000;
   	my $receiveTimeoutParam = $model->getParameterByName("receiveTimeout");
   	my $receiveTimeout = (defined $receiveTimeoutParam) ? $receiveTimeoutParam->getValueAt(0)->getCppExpression() : 120000;
   
   	my $class = $model->getContext()->getClass();
   print "\n";
   print "\n";
   SPL::CodeGen::implementationPrologue($model);
   print "\n";
   print "\n";
   print 'MY_OPERATOR_SCOPE::MY_OPERATOR::MY_OPERATOR() : socket_(new TSocket(';
   print $serverHost;
   print ', ';
   print $serverPort;
   print ')), transport_(new TBufferedTransport(socket_)),', "\n";
   print '							 protocol_(new TBinaryProtocol(transport_)), client_(protocol_) {', "\n";
   print '	socket_->setConnTimeout(';
   print $connectionTimeout;
   print ');', "\n";
   print '	socket_->setRecvTimeout(';
   print $sendTimeout;
   print ');', "\n";
   print '	socket_->setSendTimeout(';
   print $receiveTimeout;
   print ');', "\n";
   print '}', "\n";
   print "\n";
   print 'MY_OPERATOR_SCOPE::MY_OPERATOR::~MY_OPERATOR() {}', "\n";
   print "\n";
   print 'void MY_OPERATOR_SCOPE::MY_OPERATOR::allPortsReady() {', "\n";
   print '	transport_->open();', "\n";
   print '}', "\n";
   print "\n";
   print 'void MY_OPERATOR_SCOPE::MY_OPERATOR::prepareToShutdown() {', "\n";
   print '	transport_->close();', "\n";
   print '}', "\n";
   print "\n";
   print 'void MY_OPERATOR_SCOPE::MY_OPERATOR::process(Tuple const & tuple, uint32_t port) {', "\n";
   print '	try {', "\n";
   print '	';
    ThriftCallCommon::generateOperatorFunctionsCall($model); 
   print "\n";
   print '	} catch (TException &tx) {', "\n";
   print '		// printf("ERROR: %s\\n", tx.what());', "\n";
   print '	}', "\n";
   print '	/*', "\n";
   print '	 OPort0Type otuple;', "\n";
   print '	 submit(otuple, 0); // submit to output port 0', "\n";
   print '	 */', "\n";
   print '}', "\n";
   print "\n";
   print 'void MY_OPERATOR_SCOPE::MY_OPERATOR::process(Punctuation const & punct, uint32_t port) {', "\n";
   print '   forwardWindowPunctuation(punct);', "\n";
   print '}', "\n";
   print "\n";
   SPL::CodeGen::implementationEpilogue($model);
   print "\n";
   CORE::exit $SPL::CodeGen::USER_ERROR if ($SPL::CodeGen::sawError);
}
1;
