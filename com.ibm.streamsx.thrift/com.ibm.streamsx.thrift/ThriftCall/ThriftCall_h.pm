
package ThriftCall_h;
use strict; use Cwd 'realpath';  use File::Basename;  use lib dirname(__FILE__);  use SPL::Operator::Instance::OperatorInstance; use SPL::Operator::Instance::Context; use SPL::Operator::Instance::Expression; use SPL::Operator::Instance::ExpressionTree; use SPL::Operator::Instance::ExpressionTreeVisitor; use SPL::Operator::Instance::ExpressionTreeCppGenVisitor; use SPL::Operator::Instance::InputAttribute; use SPL::Operator::Instance::InputPort; use SPL::Operator::Instance::OutputAttribute; use SPL::Operator::Instance::OutputPort; use SPL::Operator::Instance::Parameter; use SPL::Operator::Instance::StateVariable; use SPL::Operator::Instance::Window; 
sub main::generate($$) {
   my ($xml, $signature) = @_;  
   print "// $$signature\n";
   my $model = SPL::Operator::Instance::OperatorInstance->new($$xml);
   unshift @INC, dirname ($model->getContext()->getOperatorDirectory()) . "/../impl/nl/include";
   $SPL::CodeGenHelper::verboseMode = $model->getContext()->isVerboseModeOn();
   	use ThriftCallCommon;
   
   	ThriftCallCommon::verifySchemas($model);
   	ThriftCallCommon::createThrift($model);
   	ThriftCallCommon::make($model);
   
   	my $class = $model->getContext()->getClass();
   
       my @includes;
       push @includes, "#include <iostream>";
       push @includes, "#include <boost/shared_ptr.hpp>";
       push @includes, "#include <streams_boost/asio.hpp>";
       push @includes, "#include <streams_boost/bind.hpp>";
       push @includes, "#include <streams_boost/date_time.hpp>";
       push @includes, "#include <streams_boost/ref.hpp>";
       push @includes, "#include <streams_boost/thread.hpp>";
       push @includes, "#include \"$class/include/$class.h\"";
       push @includes, "#include <thrift/protocol/TBinaryProtocol.h>";
       push @includes, "#include <thrift/transport/TSocket.h>";
       push @includes, "#include <thrift/transport/TTransportUtils.h>";
       push @includes, "#include <SPL/Runtime/Function/StringFunctions.h>";
   print "\n";
   print "\n";
   SPL::CodeGen::headerPrologue($model, \@includes);
   print "\n";
   print "\n";
   print 'using namespace ::apache::thrift;', "\n";
   print 'using namespace ::apache::thrift::protocol;', "\n";
   print 'using namespace ::apache::thrift::transport;', "\n";
   print "\n";
   print 'using namespace ::com::ibm::streamsx::thrift;', "\n";
   print "\n";
   print 'using namespace SPL::Functions::String;', "\n";
   print "\n";
   print 'using std::string;', "\n";
   print 'using boost::shared_ptr;', "\n";
   print "\n";
   print 'class MY_OPERATOR : public MY_BASE_OPERATOR {', "\n";
   print 'public:', "\n";
   print '  MY_OPERATOR();', "\n";
   print '  virtual ~MY_OPERATOR(); ', "\n";
   print "\n";
   print '  void allPortsReady(); ', "\n";
   print '  void prepareToShutdown(); ', "\n";
   print "\n";
   print '  void process(Tuple const & tuple, uint32_t port);', "\n";
   print '  void process(Punctuation const & punct, uint32_t port);', "\n";
   print "\n";
   print 'private:', "\n";
   print '  ';
    ThriftCallCommon::generateTypeDefs($model); 
   print "\n";
   print '  shared_ptr<TSocket> socket_;', "\n";
   print '  shared_ptr<TTransport> transport_;', "\n";
   print '  shared_ptr<TProtocol> protocol_;', "\n";
   print '  ';
   print $class;
   print 'Client client_;', "\n";
   print "\n";
   print '  template <int N>', "\n";
   print '  struct IPort{', "\n";
   print '  	typedef void type;;', "\n";
   print '  };', "\n";
   print "\n";
   print '  template <int N>', "\n";
   print '  struct OPort{', "\n";
   print '  	typedef void type;;', "\n";
   print '  };', "\n";
   print "\n";
   print '}; ', "\n";
   print "\n";
   print 'template <>', "\n";
   print 'struct MY_OPERATOR_SCOPE::MY_OPERATOR::IPort<0>{', "\n";
   print 'typedef MY_OPERATOR_SCOPE::MY_OPERATOR::IPort0Type type;', "\n";
   print '};', "\n";
   print "\n";
   print 'template <>', "\n";
   print 'struct MY_OPERATOR_SCOPE::MY_OPERATOR::OPort<0>{', "\n";
   print 'typedef MY_OPERATOR_SCOPE::MY_OPERATOR::OPort0Type type;', "\n";
   print '};', "\n";
   print "\n";
   SPL::CodeGen::headerEpilogue($model);
   print "\n";
   CORE::exit $SPL::CodeGen::USER_ERROR if ($SPL::CodeGen::sawError);
}
1;
